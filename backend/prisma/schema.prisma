generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
  COURIER
}

enum ParcelStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum WeightCategory {
  LIGHT
  MEDIUM
  HEAVY
}

model User {
  id               String    @id @default(uuid())
  name             String
  email            String    @unique
  password         String
  phone            String
  role             Role      @default(CUSTOMER)
  profileImage     String?   
  resetCode        String?         
  resetCodeExpires DateTime?       
  
  // Courier-specific fields (only used when role is COURIER)
  isAvailable      Boolean   @default(true)
  currentLat       Float?
  currentLng       Float?
  
  // Relations
  sentParcels      Parcel[]  @relation("SentParcels")
  receivedParcels  Parcel[]  @relation("ReceivedParcels")
  assignedParcels  Parcel[]  @relation("CourierParcels")
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?  
}

model Parcel {
  id                String         @id @default(uuid())
  
  senderId          String
  receiverId        String
  assignedCourierId String?

  receiverName      String
  receiverPhone     String
  pickupAddress     String
  pickupLat         Float
  pickupLng         Float
  destination       String
  destinationLat    Float
  destinationLng    Float
  weightCategory    WeightCategory
  status            ParcelStatus   @default(PENDING)

  sender            User     @relation("SentParcels", fields: [senderId], references: [id])
  receiver          User     @relation("ReceivedParcels", fields: [receiverId], references: [id])
  assignedCourier   User?    @relation("CourierParcels", fields: [assignedCourierId], references: [id])

  events            ParcelEvent[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?

  @@index([senderId])
  @@index([receiverId])
  @@index([assignedCourierId])
}

model ParcelEvent {
  id         String        @id @default(uuid())
  parcelId   String
  status     ParcelStatus
  location   Json?         // Optional flexible structure
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  parcel     Parcel        @relation(fields: [parcelId], references: [id])

  @@index([parcelId])
}